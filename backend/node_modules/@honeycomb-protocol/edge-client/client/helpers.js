"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTransactionForTests = exports.sendTransactionsForTests = exports.sendTransactions = exports.sendTransaction = exports.signTransactions = exports.signTransaction = void 0;
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
const signTransaction = (transaction, signers) => {
    const tx = web3_js_1.VersionedTransaction.deserialize(bs58_1.default.decode(transaction.transaction));
    signers.forEach((signer) => {
        try {
            tx.sign([signer]);
        }
        catch (err) {
            console.error(err);
        }
    });
    return {
        blockhash: transaction.blockhash,
        lastValidBlockHeight: transaction.lastValidBlockHeight,
        transaction: bs58_1.default.encode(tx.serialize()),
    };
};
exports.signTransaction = signTransaction;
const signTransactions = (transactions, signers) => {
    const txs = transactions.transactions.map((txStr) => {
        const tx = web3_js_1.VersionedTransaction.deserialize(bs58_1.default.decode(txStr));
        signers.forEach((signer) => {
            try {
                tx.sign([signer]);
            }
            catch (err) {
                console.error(err);
            }
        });
        return bs58_1.default.encode(tx.serialize());
    });
    return {
        blockhash: transactions.blockhash,
        lastValidBlockHeight: transactions.lastValidBlockHeight,
        transactions: txs,
    };
};
exports.signTransactions = signTransactions;
const sendTransaction = async (client, transaction, signers = [], options) => (0, exports.sendTransactions)(client, {
    ...transaction,
    transactions: [transaction.transaction],
    __typename: "Transactions",
}, signers, options).then((x) => x[0].responses[0]);
exports.sendTransaction = sendTransaction;
const sendTransactions = async (client, transactions, signers = [], options) => {
    const txs = transactions.transactions.map((txStr) => {
        const tx = web3_js_1.VersionedTransaction.deserialize(bs58_1.default.decode(txStr));
        signers.forEach((signer) => {
            try {
                tx.sign([signer]);
            }
            catch (err) {
                console.error(err);
            }
        });
        return bs58_1.default.encode(tx.serialize());
    });
    const { sendTransactionBundles } = await client.sendTransactionBundles({
        txs,
        blockhash: transactions.blockhash,
        lastValidBlockHeight: transactions.lastValidBlockHeight,
        options,
    }, options);
    return sendTransactionBundles;
};
exports.sendTransactions = sendTransactions;
const sendTransactionsForTests = async (client, transactions, signers = [], options, cb) => {
    const response = await (0, exports.sendTransactions)(client, transactions, signers, options);
    cb && response.forEach((a) => a.responses.forEach(cb));
    return response;
};
exports.sendTransactionsForTests = sendTransactionsForTests;
const sendTransactionForTests = async (client, { blockhash, lastValidBlockHeight, transaction }, signers = [], options, cb) => {
    const response = await (0, exports.sendTransactions)(client, { blockhash, lastValidBlockHeight, transactions: [transaction] }, signers, options);
    cb && response.forEach((a) => a.responses.forEach(cb));
    return response[0].responses[0];
};
exports.sendTransactionForTests = sendTransactionForTests;
//# sourceMappingURL=helpers.js.map