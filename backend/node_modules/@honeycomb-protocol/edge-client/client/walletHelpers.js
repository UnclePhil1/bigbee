"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendClientTransactions = void 0;
const bs58_1 = __importDefault(require("bs58"));
const web3_js_1 = require("@solana/web3.js");
const sendClientTransactions = async (client, wallet, txResponse, options) => {
    if (!wallet.signAllTransactions || !wallet.connected) {
        throw new Error("Invalid wallet");
    }
    if ("transaction" in txResponse) {
        txResponse = {
            blockhash: txResponse.blockhash,
            lastValidBlockHeight: txResponse.lastValidBlockHeight,
            transactions: [txResponse.transaction],
            __typename: "Transactions",
        };
    }
    const allTxns = txResponse.transactions.map((txStr) => {
        let tn = web3_js_1.VersionedTransaction.deserialize(bs58_1.default.decode(txStr));
        tn.message.recentBlockhash = txResponse.blockhash;
        return tn;
    });
    const txs = await wallet
        .signAllTransactions(allTxns)
        .then((txs) => {
        return txs.map((tx) => bs58_1.default.encode(tx.serialize()));
    })
        .catch((e) => {
        console.error("Failed to sign transactions: ", e);
        throw new Error(e);
    });
    const { sendTransactionBundles } = await client.sendTransactionBundles({
        txs,
        blockhash: txResponse.blockhash,
        lastValidBlockHeight: txResponse.lastValidBlockHeight,
        options,
    });
    return sendTransactionBundles;
};
exports.sendClientTransactions = sendClientTransactions;
//# sourceMappingURL=walletHelpers.js.map