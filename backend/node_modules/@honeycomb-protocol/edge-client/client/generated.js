"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchCharacterHistoryDocument = exports.FindCharactersDocument = exports.FindCharacterModelsDocument = exports.FindCharacterTraitsDocument = exports.FindAssemblerConfigDocument = exports.CreateNewUserWithProfileTransactionDocument = exports.CreateUpdatePlatformDataTransactionDocument = exports.CreateUpdateProfileTransactionDocument = exports.CreateNewProfileTransactionDocument = exports.CreateCreateProfilesTreeTransactionDocument = exports.CreateModifyDelegationTransactionDocument = exports.CreateCreateDelegateAuthorityTransactionDocument = exports.CreateChangeProjectDriverTransactionDocument = exports.CreateCreateProjectTransactionDocument = exports.CreateUpdateUserTransactionDocument = exports.CreateNewUserBulkTransactionDocument = exports.CreateNewUserTransactionDocument = exports.FindProfilesDocument = exports.FindUsersDocument = exports.FindDelegateAuthorityDocument = exports.FindProjectsDocument = exports.FindGlobalDocument = exports.CreateBurnAssetsTransactionsDocument = exports.CreateTransferAssetsTransactionsDocument = exports.AuthConfirmDocument = exports.AuthRequestDocument = exports.SignWithShadowSignerAndSendBulkTransactionsDocument = exports.SendBulkTransactionsDocument = exports.SignWithShadowSignerAndSendTransactionBundlesDocument = exports.SendTransactionBundlesDocument = exports.FindAccountsDocument = exports.FetchProofsDocument = exports.FindCompressedAccountsDocument = exports.SourceKind = exports.RewardKind = exports.ResourceStorageEnum = exports.ResourceManagerPermissionInput = exports.ResourceCustodyEnum = exports.RemoveSocialsInput = exports.NectarStakingPermissionInput = exports.NectarMissionsPermissionInput = exports.MintAsKind = exports.LockTypeEnum = exports.HiveControlPermissionInput = exports.CivicGateway = exports.CharacterSourceKind = exports.CharacterManagerPermissionInput = exports.BuzzGuildPermissionInput = exports.BadgesCondition = exports.AssetCriteriaKind = void 0;
exports.CreateExportFungibleResourceTransactionDocument = exports.CreateImportFungibleResourceTransactionDocument = exports.CreateCreateNewResourceTransactionDocument = exports.FindHoldingsDocument = exports.FindRecipesDocument = exports.FindFaucetsDocument = exports.FindResourcesBalanceDocument = exports.FindResourcesDocument = exports.CreateRecallCharactersTransactionDocument = exports.CreateSendCharactersOnMissionTransactionDocument = exports.CreateUpdateMissionTransactionDocument = exports.CreateCreateMissionTransactionDocument = exports.CreateUpdateMissionPoolTransactionDocument = exports.CreateCreateMissionPoolTransactionDocument = exports.FindMissionPoolsDocument = exports.FindMissionsDocument = exports.CreateUnstakeCharactersTransactionsDocument = exports.CreateClaimStakingRewardsTransactionsDocument = exports.CreateUnstakeSplTokensTransactionDocument = exports.CreateClaimSplRewardsTransactionDocument = exports.CreateStakeSplTokensTransactionDocument = exports.CreateAddRemoveRewardsFromRewardPoolTransactionDocument = exports.CreateSplRewardPoolTransactionDocument = exports.CreateAddRemoveSplMultipliersTransactionDocument = exports.CreateCreateNewSplStakingPoolTreeTransactionDocument = exports.CreateUpdateSplStakingPoolTransactionDocument = exports.CreateCreateSplStakingPoolTransactionDocument = exports.FindSplStakingRecipientsDocument = exports.FindSplStakingPoolsDocument = exports.CreateStakeCharactersTransactionsDocument = exports.CreateAddMultiplierTransactionDocument = exports.CreateInitMultipliersTransactionDocument = exports.CreateUpdateStakingPoolTransactionDocument = exports.CreateCreateStakingPoolTransactionDocument = exports.FindMultipliersDocument = exports.FindStakersDocument = exports.FindStakingPoolsDocument = exports.CreateUseCharacterTransactionDocument = exports.CreateDismountResourceOnCharacterTransactionDocument = exports.CreateEquipResourceOnCharacterTransactionDocument = exports.CreateUnwrapAssetsFromCharacterTransactionsDocument = exports.CreateWrapAssetsToCharacterTransactionsDocument = exports.CreatePopulateCharacterTransactionDocument = exports.CreateUpdateCharacterTraitsTransactionDocument = exports.CreateAssembleCharacterTransactionDocument = exports.CreateCreateCharactersTreeTransactionDocument = exports.CreateCreateCharacterModelTransactionDocument = exports.CreateRemoveCharacterTraitsTransactionsDocument = exports.CreateAddCharacterTraitsTransactionsDocument = exports.CreateCreateAssemblerConfigTransactionDocument = void 0;
exports.CreateUpdateBadgeCriteriaTransactionDocument = exports.CreateClaimBadgeCriteriaTransactionDocument = exports.CreateInitializeBadgeCriteriaTransactionDocument = exports.CreateInitCookingProcessTransactionsDocument = exports.CreateRemoveIngredientsTransactionDocument = exports.CreateAddIngredientsTransactionDocument = exports.CreateInitializeRecipeTransactionDocument = exports.CreateClaimFaucetTransactionDocument = exports.CreateInitializeFaucetTransactionDocument = exports.CreateCreateUnwrapHoldingTransactionDocument = exports.CreateCreateWrapHoldingTransactionDocument = exports.CreateTransferResourceTransactionDocument = exports.CreateBurnResourceTransactionDocument = exports.CreateMintResourceTransactionDocument = exports.CreateCreateNewResourceTreeTransactionDocument = void 0;
exports.getSdk = getSdk;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
var AssetCriteriaKind;
(function (AssetCriteriaKind) {
    AssetCriteriaKind["Collection"] = "Collection";
    AssetCriteriaKind["Creator"] = "Creator";
    AssetCriteriaKind["MerkleTree"] = "MerkleTree";
    AssetCriteriaKind["Prepopulated"] = "Prepopulated";
})(AssetCriteriaKind || (exports.AssetCriteriaKind = AssetCriteriaKind = {}));
var BadgesCondition;
(function (BadgesCondition) {
    BadgesCondition["Public"] = "Public";
})(BadgesCondition || (exports.BadgesCondition = BadgesCondition = {}));
var BuzzGuildPermissionInput;
(function (BuzzGuildPermissionInput) {
    BuzzGuildPermissionInput["ManageGuildKit"] = "ManageGuildKit";
})(BuzzGuildPermissionInput || (exports.BuzzGuildPermissionInput = BuzzGuildPermissionInput = {}));
var CharacterManagerPermissionInput;
(function (CharacterManagerPermissionInput) {
    CharacterManagerPermissionInput["AssignCharacterTraits"] = "AssignCharacterTraits";
    CharacterManagerPermissionInput["ManageAssemblerConfig"] = "ManageAssemblerConfig";
    CharacterManagerPermissionInput["ManageCharacterModels"] = "ManageCharacterModels";
})(CharacterManagerPermissionInput || (exports.CharacterManagerPermissionInput = CharacterManagerPermissionInput = {}));
var CharacterSourceKind;
(function (CharacterSourceKind) {
    CharacterSourceKind["Assembled"] = "Assembled";
    CharacterSourceKind["Wrapped"] = "Wrapped";
})(CharacterSourceKind || (exports.CharacterSourceKind = CharacterSourceKind = {}));
var CivicGateway;
(function (CivicGateway) {
    CivicGateway["IdVerificationPass"] = "IdVerificationPass";
    CivicGateway["LivenessPass"] = "LivenessPass";
    CivicGateway["UniquenessPass"] = "UniquenessPass";
})(CivicGateway || (exports.CivicGateway = CivicGateway = {}));
var HiveControlPermissionInput;
(function (HiveControlPermissionInput) {
    HiveControlPermissionInput["ManageCriterias"] = "ManageCriterias";
    HiveControlPermissionInput["ManageProjectDriver"] = "ManageProjectDriver";
    HiveControlPermissionInput["ManageServices"] = "ManageServices";
    HiveControlPermissionInput["UpdatePlatformData"] = "UpdatePlatformData";
})(HiveControlPermissionInput || (exports.HiveControlPermissionInput = HiveControlPermissionInput = {}));
var LockTypeEnum;
(function (LockTypeEnum) {
    LockTypeEnum["Custody"] = "Custody";
    LockTypeEnum["Freeze"] = "Freeze";
})(LockTypeEnum || (exports.LockTypeEnum = LockTypeEnum = {}));
var MintAsKind;
(function (MintAsKind) {
    MintAsKind["MplBubblegum"] = "MplBubblegum";
    MintAsKind["MplCore"] = "MplCore";
    MintAsKind["MplMetadata"] = "MplMetadata";
    MintAsKind["TokenExtensions"] = "TokenExtensions";
})(MintAsKind || (exports.MintAsKind = MintAsKind = {}));
var NectarMissionsPermissionInput;
(function (NectarMissionsPermissionInput) {
    NectarMissionsPermissionInput["ManageMissionPool"] = "ManageMissionPool";
    NectarMissionsPermissionInput["WithdrawMissionPoolRewards"] = "WithdrawMissionPoolRewards";
})(NectarMissionsPermissionInput || (exports.NectarMissionsPermissionInput = NectarMissionsPermissionInput = {}));
var NectarStakingPermissionInput;
(function (NectarStakingPermissionInput) {
    NectarStakingPermissionInput["ManageStakingPool"] = "ManageStakingPool";
    NectarStakingPermissionInput["WithdrawStakingPoolRewards"] = "WithdrawStakingPoolRewards";
})(NectarStakingPermissionInput || (exports.NectarStakingPermissionInput = NectarStakingPermissionInput = {}));
var RemoveSocialsInput;
(function (RemoveSocialsInput) {
    RemoveSocialsInput["All"] = "All";
    RemoveSocialsInput["Discord"] = "Discord";
    RemoveSocialsInput["Steam"] = "Steam";
    RemoveSocialsInput["Twitter"] = "Twitter";
})(RemoveSocialsInput || (exports.RemoveSocialsInput = RemoveSocialsInput = {}));
var ResourceCustodyEnum;
(function (ResourceCustodyEnum) {
    ResourceCustodyEnum["Authority"] = "Authority";
    ResourceCustodyEnum["Supply"] = "Supply";
})(ResourceCustodyEnum || (exports.ResourceCustodyEnum = ResourceCustodyEnum = {}));
var ResourceManagerPermissionInput;
(function (ResourceManagerPermissionInput) {
    ResourceManagerPermissionInput["BurnResources"] = "BurnResources";
    ResourceManagerPermissionInput["CreateFaucet"] = "CreateFaucet";
    ResourceManagerPermissionInput["CreateRecipe"] = "CreateRecipe";
    ResourceManagerPermissionInput["CreateResources"] = "CreateResources";
    ResourceManagerPermissionInput["MintResources"] = "MintResources";
})(ResourceManagerPermissionInput || (exports.ResourceManagerPermissionInput = ResourceManagerPermissionInput = {}));
var ResourceStorageEnum;
(function (ResourceStorageEnum) {
    ResourceStorageEnum["AccountState"] = "AccountState";
    ResourceStorageEnum["LedgerState"] = "LedgerState";
})(ResourceStorageEnum || (exports.ResourceStorageEnum = ResourceStorageEnum = {}));
var RewardKind;
(function (RewardKind) {
    RewardKind["Resource"] = "Resource";
    RewardKind["Xp"] = "Xp";
})(RewardKind || (exports.RewardKind = RewardKind = {}));
var SourceKind;
(function (SourceKind) {
    SourceKind["Assembled"] = "Assembled";
    SourceKind["MplBubblegum"] = "MplBubblegum";
    SourceKind["MplCoreAsset"] = "MplCoreAsset";
    SourceKind["MplMetadata"] = "MplMetadata";
    SourceKind["TokenExtensions"] = "TokenExtensions";
})(SourceKind || (exports.SourceKind = SourceKind = {}));
exports.FindCompressedAccountsDocument = (0, graphql_tag_1.default) `
    query findCompressedAccounts($addresses: [Bytes!]!, $identity: DisrcriminatorFilter, $leaves: [TreeLeaf!], $parsedData: JSON) {
  compressedAccount(
    addresses: $addresses
    identity: $identity
    leaves: $leaves
    parsedData: $parsedData
  ) {
    leaf_idx
    parsed_data
    raw_data
    schema_validated
    tree_id
  }
}
    `;
exports.FetchProofsDocument = (0, graphql_tag_1.default) `
    query fetchProofs($leaves: [TreeLeaf!]!) {
  proof(leaves: $leaves) {
    root
    proof
    maxDepth
    node_index
    leaf
    leaf_index
    tree_id
    canopy_depth
  }
}
    `;
exports.FindAccountsDocument = (0, graphql_tag_1.default) `
    query findAccounts($programId: Bytes!, $discriminator: Bytes, $parsedData: JSON) {
  account(
    programId: $programId
    discriminator: $discriminator
    parsedData: $parsedData
  ) {
    address
    program_id
    discriminator
    parsed_data
  }
}
    `;
exports.SendTransactionBundlesDocument = (0, graphql_tag_1.default) `
    query sendTransactionBundles($txs: [Bytes!]!, $blockhash: String!, $lastValidBlockHeight: Int!, $options: SendTransactionBundlesOptions) {
  sendTransactionBundles(
    txs: $txs
    blockhash: $blockhash
    lastValidBlockHeight: $lastValidBlockHeight
    options: $options
  ) @stream {
    bundleId
    responses {
      signature
      error
      status
    }
  }
}
    `;
exports.SignWithShadowSignerAndSendTransactionBundlesDocument = (0, graphql_tag_1.default) `
    query signWithShadowSignerAndSendTransactionBundles($txs: [Bytes!]!, $blockhash: String!, $lastValidBlockHeight: Int!, $authToken: String!, $options: SendTransactionBundlesOptions) {
  signWithShadowSignerAndSendTransactionBundles(
    txs: $txs
    blockhash: $blockhash
    lastValidBlockHeight: $lastValidBlockHeight
    authToken: $authToken
    options: $options
  ) @stream {
    bundleId
    responses {
      signature
      error
      status
    }
  }
}
    `;
exports.SendBulkTransactionsDocument = (0, graphql_tag_1.default) `
    query sendBulkTransactions($txs: [Bytes!]!, $blockhash: String!, $lastValidBlockHeight: Int!, $options: SendTransactionBundlesOptions) {
  sendBulkTransactions(
    txs: $txs
    blockhash: $blockhash
    lastValidBlockHeight: $lastValidBlockHeight
    options: $options
  ) {
    signature
    error
    status
  }
}
    `;
exports.SignWithShadowSignerAndSendBulkTransactionsDocument = (0, graphql_tag_1.default) `
    query signWithShadowSignerAndSendBulkTransactions($txs: [Bytes!]!, $blockhash: String!, $lastValidBlockHeight: Int!, $options: SendTransactionBundlesOptions) {
  signWithShadowSignerAndSendBulkTransactions(
    txs: $txs
    blockhash: $blockhash
    lastValidBlockHeight: $lastValidBlockHeight
    options: $options
  ) {
    signature
    error
    status
  }
}
    `;
exports.AuthRequestDocument = (0, graphql_tag_1.default) `
    query authRequest($wallet: String!, $useTx: Boolean, $useRpc: String) {
  authRequest(wallet: $wallet, useTx: $useTx, useRpc: $useRpc) {
    message
    tx
  }
}
    `;
exports.AuthConfirmDocument = (0, graphql_tag_1.default) `
    query authConfirm($wallet: String!, $signature: String!) {
  authConfirm(wallet: $wallet, signature: $signature) {
    accessToken
    user {
      address
      id
      info {
        bio
        name
        pfp
      }
      wallets {
        shadow
        wallets
      }
    }
  }
}
    `;
exports.CreateTransferAssetsTransactionsDocument = (0, graphql_tag_1.default) `
    query createTransferAssetsTransactions($addresses: [String!]!, $to: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createTransferAssetsTransactions(
    addresses: $addresses
    to: $to
    computeUnitPrice: $computeUnitPrice
    lutAddresses: $lutAddresses
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateBurnAssetsTransactionsDocument = (0, graphql_tag_1.default) `
    query createBurnAssetsTransactions($addresses: [String!]!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createBurnAssetsTransactions(
    addresses: $addresses
    computeUnitPrice: $computeUnitPrice
    lutAddresses: $lutAddresses
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.FindGlobalDocument = (0, graphql_tag_1.default) `
    query findGlobal($env: String) {
  global(env: $env) {
    address
    bump
    config
    userTrees {
      active
      merkle_trees
      schema
    }
    totalUsers
  }
}
    `;
exports.FindProjectsDocument = (0, graphql_tag_1.default) `
    query findProjects($addresses: [Bytes!], $names: [String!], $authorities: [Pubkey!]) {
  project(addresses: $addresses, names: $names, authorities: $authorities) {
    associatedPrograms {
      address
      trustedActions {
        kind
      }
    }
    authority
    bump
    driver
    address
    key
    name
    profileDataConfig {
      achievements
      customDataFields
    }
    profileTrees {
      active
      merkle_trees
      schema
    }
    badgeCriteria {
      index
      condition
      endTime
      startTime
    }
    services {
      kind
      params {
        ... on ServiceParamsAssembler {
          assemblerId
        }
        ... on ServiceParamsAssetManager {
          assetManagerId
        }
        ... on ServiceParamsStaking {
          poolId
        }
        ... on ServiceParamsMissions {
          poolId
        }
        ... on ServiceParamsRaffles {
          poolId
        }
        ... on ServiceParamsGuildKit {
          kitId
        }
      }
    }
    subsidyFees
  }
}
    `;
exports.FindDelegateAuthorityDocument = (0, graphql_tag_1.default) `
    query findDelegateAuthority($addresses: [Bytes!], $delegates: [Pubkey!], $projects: [Pubkey!]) {
  delegateAuthority(
    addresses: $addresses
    delegates: $delegates
    projects: $projects
  ) {
    authority
    bump
    delegations {
      kind
      index
      permission
    }
  }
}
    `;
exports.FindUsersDocument = (0, graphql_tag_1.default) `
    query findUsers($addresses: [Bytes!], $ids: [Int!], $wallets: [Pubkey!], $includeProof: Boolean, $includeProjectProfiles: [Pubkey]) {
  user(
    addresses: $addresses
    ids: $ids
    wallets: $wallets
    includeProof: $includeProof
    includeProjectProfiles: $includeProjectProfiles
  ) {
    address
    id
    info {
      bio
      name
      pfp
      username
    }
    socialInfo {
      discord
      twitter
      civic {
        expiry
        gatekeeperNetwork
        walletIndex
      }
      steam
    }
    wallets {
      shadow
      wallets
    }
    profiles {
      customData
      address
      identity
      info {
        bio
        name
        pfp
      }
      platformData {
        achievements
        custom
        xp
      }
      project
      userId
      leaf_idx
      tree_id
      proof {
        leaf
        leaf_index
        node_index
        proof
        maxDepth
        root
        tree_id
        canopy_depth
      }
    }
    leaf_idx
    tree_id
    proof {
      leaf
      leaf_index
      node_index
      maxDepth
      proof
      root
      tree_id
      canopy_depth
    }
  }
}
    `;
exports.FindProfilesDocument = (0, graphql_tag_1.default) `
    query findProfiles($addresses: [Bytes!], $projects: [Pubkey!], $userIds: [Int!], $identities: [String!], $includeProof: Boolean, $includeUsers: Boolean) {
  profile(
    addresses: $addresses
    projects: $projects
    userIds: $userIds
    identities: $identities
    includeProof: $includeProof
    includeUsers: $includeUsers
  ) {
    customData
    address
    identity
    info {
      bio
      name
      pfp
    }
    platformData {
      achievements
      custom
      xp
    }
    project
    userId
    leaf_idx
    tree_id
    proof {
      leaf
      leaf_index
      node_index
      proof
      maxDepth
      root
      tree_id
      canopy_depth
    }
    user {
      address
      id
      info {
        bio
        name
        pfp
        username
      }
      socialInfo {
        discord
        twitter
        civic {
          expiry
          gatekeeperNetwork
          walletIndex
        }
        steam
      }
      wallets {
        shadow
        wallets
      }
      leaf_idx
      tree_id
      proof {
        leaf
        leaf_index
        node_index
        maxDepth
        proof
        root
        tree_id
        canopy_depth
      }
    }
  }
}
    `;
exports.CreateNewUserTransactionDocument = (0, graphql_tag_1.default) `
    query createNewUserTransaction($wallet: String!, $info: UserInfoInput, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createNewUserTransaction(
    wallet: $wallet
    info: $info
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateNewUserBulkTransactionDocument = (0, graphql_tag_1.default) `
    query createNewUserBulkTransaction($wallet: [String!]!, $info: [UserInfoInput!]!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createNewUserBulkTransaction(
    wallet: $wallet
    info: $info
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateUpdateUserTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateUserTransaction($info: PartialUserInfoInput, $wallets: UpdateWalletInput, $payer: String!, $populateCivic: Boolean, $removeSocials: [RemoveSocialsInput!], $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateUserTransaction(
    info: $info
    wallets: $wallets
    payer: $payer
    populateCivic: $populateCivic
    removeSocials: $removeSocials
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateCreateProjectTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateProjectTransaction($authority: String!, $name: String!, $driver: String, $associatedPrograms: [AssociatedProgramInput!], $profileDataConfig: ProfileDataConfigInput, $subsidizeFees: Boolean, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateProjectTransaction(
    authority: $authority
    name: $name
    driver: $driver
    associatedPrograms: $associatedPrograms
    profileDataConfig: $profileDataConfig
    subsidizeFees: $subsidizeFees
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    project
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
  }
}
    `;
exports.CreateChangeProjectDriverTransactionDocument = (0, graphql_tag_1.default) `
    query createChangeProjectDriverTransaction($project: String!, $driver: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createChangeProjectDriverTransaction(
    project: $project
    driver: $driver
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateCreateDelegateAuthorityTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateDelegateAuthorityTransaction($project: String!, $delegate: String!, $serviceDelegations: ServiceDelegationInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateDelegateAuthorityTransaction(
    project: $project
    delegate: $delegate
    serviceDelegations: $serviceDelegations
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateModifyDelegationTransactionDocument = (0, graphql_tag_1.default) `
    query createModifyDelegationTransaction($project: String!, $delegate: String!, $modifyDelegation: ModifyDelegationInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createModifyDelegationTransaction(
    project: $project
    delegate: $delegate
    modifyDelegation: $modifyDelegation
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateCreateProfilesTreeTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateProfilesTreeTransaction($treeConfig: TreeSetupConfig!, $project: String!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateProfilesTreeTransaction(
    treeConfig: $treeConfig
    project: $project
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    treeAddress
    proofBytes
    space
    cost
    maxTreeCapacity
  }
}
    `;
exports.CreateNewProfileTransactionDocument = (0, graphql_tag_1.default) `
    query createNewProfileTransaction($project: String!, $identity: String, $info: ProfileInfoInput, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createNewProfileTransaction(
    project: $project
    identity: $identity
    info: $info
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateUpdateProfileTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateProfileTransaction($profile: String!, $payer: String!, $info: ProfileInfoInput, $customData: CustomDataInput, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateProfileTransaction(
    profile: $profile
    payer: $payer
    info: $info
    customData: $customData
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateUpdatePlatformDataTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdatePlatformDataTransaction($profile: String!, $authority: String!, $payer: String, $platformData: PlatformDataInput, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdatePlatformDataTransaction(
    profile: $profile
    authority: $authority
    payer: $payer
    platformData: $platformData
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateNewUserWithProfileTransactionDocument = (0, graphql_tag_1.default) `
    query createNewUserWithProfileTransaction($project: String!, $wallet: String!, $payer: String, $userInfo: UserInfoInput!, $profileIdentity: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createNewUserWithProfileTransaction(
    project: $project
    wallet: $wallet
    userInfo: $userInfo
    profileIdentity: $profileIdentity
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.FindAssemblerConfigDocument = (0, graphql_tag_1.default) `
    query findAssemblerConfig($addresses: [Bytes!], $tickers: [String!], $characterModel: [Bytes!], $project: [Pubkey!]) {
  assemblerConfig(
    addresses: $addresses
    tickers: $tickers
    characterModel: $characterModel
    project: $project
  ) {
    address
    program_id
    discriminator
    ticker
    project
    order
    merkle_trees {
      active
      merkle_trees
      schema
    }
  }
}
    `;
exports.FindCharacterTraitsDocument = (0, graphql_tag_1.default) `
    query findCharacterTraits($addresses: [Bytes!], $trees: [Bytes!], $includeProof: Boolean) {
  characterTrait(
    addresses: $addresses
    trees: $trees
    includeProof: $includeProof
  ) {
    address
    layer
    leaf_idx
    name
    proof {
      root
      proof
      node_index
      leaf
      maxDepth
      leaf_index
      tree_id
      canopy_depth
    }
    tree_id
    uri
  }
}
    `;
exports.FindCharacterModelsDocument = (0, graphql_tag_1.default) `
    query findCharacterModels($addresses: [Bytes!], $project: Pubkey, $assemblerConfigs: [Pubkey!]) {
  characterModel(
    addresses: $addresses
    project: $project
    assemblerConfigs: $assemblerConfigs
  ) {
    address
    program_id
    discriminator
    bump
    key
    equipableCriteria
    project
    attributes
    merkle_trees {
      active
      merkle_trees
      schema
    }
    cooldown {
      ejection
    }
    config {
      ... on CharacterConfigWrapped {
        criterias {
          kind
          params
        }
        kind
      }
      ... on CharacterConfigAssembled {
        kind
        assemblerConfig
        name
        symbol
        description
        creators {
          address
          share
        }
        sellerFeeBasisPoints
        collectionName
        mintAs {
          kind
          params {
            ... on MintAsParamsMplBubblegum {
              merkleTree
            }
          }
        }
      }
    }
  }
}
    `;
exports.FindCharactersDocument = (0, graphql_tag_1.default) `
    query findCharacters($includeProof: Boolean, $addresses: [Bytes!], $filters: CharactersFilter, $trees: [Bytes!], $wallets: [Pubkey!], $mints: [Pubkey!], $attributeHashes: [Pubkey!]) {
  character(
    includeProof: $includeProof
    addresses: $addresses
    filters: $filters
    trees: $trees
    wallets: $wallets
    mints: $mints
    attributeHashes: $attributeHashes
  ) {
    source {
      kind
      params {
        ... on Wrapped {
          mint
          criteria {
            kind
            params
          }
          kind
        }
        ... on Assembled {
          hash
          mint
          uri
          attributes
          assemblerConfig
        }
      }
      kind
    }
    owner
    proof {
      leaf
      leaf_index
      node_index
      maxDepth
      proof
      root
      tree_id
      canopy_depth
    }
    usedBy {
      kind
      params {
        ... on UsedByStaking {
          pool
          staker
          stakedAt
          claimedAt
        }
        ... on UsedByMission {
          missionId
          participationId
          rewards {
            delta
            rewardIdx
            collected
          }
          endTime
        }
        ... on UsedByGuild {
          id
          role {
            kind
          }
          order
        }
        ... on UsedByEjected {
          mint
        }
        ... on UsedByCustom {
          user
          data
        }
      }
    }
    equipments
    leaf_idx
    tree_id
    address
    asset
    cooldown {
      ejection
    }
  }
}
    `;
exports.FetchCharacterHistoryDocument = (0, graphql_tag_1.default) `
    query fetchCharacterHistory($addresses: [Bytes!]!, $event: [String!]) {
  characterHistory(addresses: $addresses, event: $event) {
    address
    event
    event_data
    time
  }
}
    `;
exports.CreateCreateAssemblerConfigTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateAssemblerConfigTransaction($treeConfig: TreeSetupConfig, $ticker: String!, $order: [String!], $project: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateAssemblerConfigTransaction(
    treeConfig: $treeConfig
    ticker: $ticker
    order: $order
    project: $project
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    assemblerConfig
    treeAddress
    proofBytes
    space
    cost
    maxTreeCapacity
  }
}
    `;
exports.CreateAddCharacterTraitsTransactionsDocument = (0, graphql_tag_1.default) `
    query createAddCharacterTraitsTransactions($assemblerConfig: String!, $traits: [CharacterTraitInput!]!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAddCharacterTraitsTransactions(
    assemblerConfig: $assemblerConfig
    traits: $traits
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateRemoveCharacterTraitsTransactionsDocument = (0, graphql_tag_1.default) `
    query createRemoveCharacterTraitsTransactions($assemblerConfig: String!, $traitsAddresses: [String!]!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createRemoveCharacterTraitsTransactions(
    assemblerConfig: $assemblerConfig
    traitsAddresses: $traitsAddresses
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateCreateCharacterModelTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateCharacterModelTransaction($config: CharacterConfigInput!, $project: String!, $authority: String!, $attributes: VecMapGeneric, $mintAs: MintAsInput, $cooldown: CharacterCooldownInput, $equipableCriteria: [String!], $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateCharacterModelTransaction(
    config: $config
    project: $project
    authority: $authority
    attributes: $attributes
    mintAs: $mintAs
    cooldown: $cooldown
    equipableCriteria: $equipableCriteria
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    characterModel
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
  }
}
    `;
exports.CreateCreateCharactersTreeTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateCharactersTreeTransaction($treeConfig: TreeSetupConfig!, $project: String!, $characterModel: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateCharactersTreeTransaction(
    treeConfig: $treeConfig
    project: $project
    characterModel: $characterModel
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    treeAddress
    proofBytes
    space
    cost
    maxTreeCapacity
  }
}
    `;
exports.CreateAssembleCharacterTransactionDocument = (0, graphql_tag_1.default) `
    query createAssembleCharacterTransaction($uri: String, $attributes: VecMapGeneric, $project: String!, $assemblerConfig: String!, $characterModel: String!, $owner: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAssembleCharacterTransaction(
    uri: $uri
    attributes: $attributes
    project: $project
    assemblerConfig: $assemblerConfig
    characterModel: $characterModel
    owner: $owner
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateUpdateCharacterTraitsTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateCharacterTraitsTransaction($characterAddress: String!, $uri: String, $attributes: VecMapGeneric, $project: String!, $assemblerConfig: String!, $characterModel: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateCharacterTraitsTransaction(
    characterAddress: $characterAddress
    uri: $uri
    attributes: $attributes
    project: $project
    assemblerConfig: $assemblerConfig
    characterModel: $characterModel
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreatePopulateCharacterTransactionDocument = (0, graphql_tag_1.default) `
    query createPopulateCharacterTransaction($attributes: VecMapGeneric, $project: String!, $assemblerConfig: String, $characterModel: String!, $mint: String!, $owner: String!, $updateAuthority: String!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createPopulateCharacterTransaction(
    attributes: $attributes
    project: $project
    assemblerConfig: $assemblerConfig
    characterModel: $characterModel
    mint: $mint
    owner: $owner
    updateAuthority: $updateAuthority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateWrapAssetsToCharacterTransactionsDocument = (0, graphql_tag_1.default) `
    query createWrapAssetsToCharacterTransactions($project: String!, $characterModel: String!, $wallet: String!, $mintList: [String!]!, $libreplexDeployment: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createWrapAssetsToCharacterTransactions(
    project: $project
    characterModel: $characterModel
    wallet: $wallet
    mintList: $mintList
    libreplexDeployment: $libreplexDeployment
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateUnwrapAssetsFromCharacterTransactionsDocument = (0, graphql_tag_1.default) `
    query createUnwrapAssetsFromCharacterTransactions($project: String!, $characterAddresses: [String!]!, $characterModel: String!, $wallet: String!, $libreplexDeployment: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUnwrapAssetsFromCharacterTransactions(
    characterAddresses: $characterAddresses
    characterModel: $characterModel
    project: $project
    wallet: $wallet
    libreplexDeployment: $libreplexDeployment
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateEquipResourceOnCharacterTransactionDocument = (0, graphql_tag_1.default) `
    query createEquipResourceOnCharacterTransaction($characterModel: String!, $characterAddress: String!, $resource: String!, $amount: BigInt!, $owner: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createEquipResourceOnCharacterTransaction(
    characterModel: $characterModel
    characterAddress: $characterAddress
    resource: $resource
    amount: $amount
    owner: $owner
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateDismountResourceOnCharacterTransactionDocument = (0, graphql_tag_1.default) `
    query createDismountResourceOnCharacterTransaction($characterModel: String!, $characterAddress: String!, $resource: String!, $amount: BigInt!, $owner: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createDismountResourceOnCharacterTransaction(
    characterModel: $characterModel
    characterAddress: $characterAddress
    resource: $resource
    amount: $amount
    owner: $owner
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateUseCharacterTransactionDocument = (0, graphql_tag_1.default) `
    query createUseCharacterTransaction($data: JSON, $unUse: Boolean, $character: String!, $project: String!, $characterModel: String!, $user: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUseCharacterTransaction(
    data: $data
    unUse: $unUse
    character: $character
    project: $project
    characterModel: $characterModel
    user: $user
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.FindStakingPoolsDocument = (0, graphql_tag_1.default) `
    query findStakingPools($addresses: [Bytes!], $projects: [Pubkey!], $names: [String!]) {
  stakingPools(addresses: $addresses, projects: $projects, names: $names) {
    allowedMints
    bump
    characterModels
    cooldownDuration
    resource
    endTime
    key
    lockType {
      kind
    }
    maxRewardsDuration
    minStakeDuration
    name
    project
    resetStakeDuration
    rewardsDuration
    rewardsPerDuration
    startTime
    totalStaked
    address
  }
}
    `;
exports.FindStakersDocument = (0, graphql_tag_1.default) `
    query findStakers($addresses: [Bytes!], $stakingPools: [Pubkey!], $wallets: [Pubkey!]) {
  stakers(addresses: $addresses, stakingPools: $stakingPools, wallets: $wallets) {
    bump
    stakingPool
    totalStaked
    wallet
  }
}
    `;
exports.FindMultipliersDocument = (0, graphql_tag_1.default) `
    query findMultipliers($addresses: [Bytes!], $stakingPools: [Pubkey!]) {
  multipliers(addresses: $addresses, stakingPools: $stakingPools) {
    bump
    collectionMultipliers {
      multiplierType {
        kind
        params {
          ... on MultiplierTypeParamsStakeDuration {
            minDuration
          }
          ... on MultiplierTypeParamsNFTCount {
            minCount
          }
          ... on MultiplierTypeParamsCreator {
            creator
          }
          ... on MultiplierTypeParamsCollection {
            collection
          }
        }
      }
      value
    }
    countMultipliers {
      multiplierType {
        kind
        params {
          ... on MultiplierTypeParamsStakeDuration {
            minDuration
          }
          ... on MultiplierTypeParamsNFTCount {
            minCount
          }
          ... on MultiplierTypeParamsCreator {
            creator
          }
          ... on MultiplierTypeParamsCollection {
            collection
          }
        }
      }
      value
    }
    creatorMultipliers {
      multiplierType {
        kind
        params {
          ... on MultiplierTypeParamsStakeDuration {
            minDuration
          }
          ... on MultiplierTypeParamsNFTCount {
            minCount
          }
          ... on MultiplierTypeParamsCreator {
            creator
          }
          ... on MultiplierTypeParamsCollection {
            collection
          }
        }
      }
      value
    }
    decimals
    durationMultipliers {
      multiplierType {
        kind
        params {
          ... on MultiplierTypeParamsStakeDuration {
            minDuration
          }
          ... on MultiplierTypeParamsNFTCount {
            minCount
          }
          ... on MultiplierTypeParamsCreator {
            creator
          }
          ... on MultiplierTypeParamsCollection {
            collection
          }
        }
      }
      value
    }
    address
    stakingPool
  }
}
    `;
exports.CreateCreateStakingPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateStakingPoolTransaction($project: String!, $resource: String!, $metadata: CreateStakingPoolMetadataInput!, $authority: String!, $multiplier: InitStakingMultiplierMetadataInput, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateStakingPoolTransaction(
    project: $project
    resource: $resource
    metadata: $metadata
    authority: $authority
    multiplier: $multiplier
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions {
      transactions
      blockhash
      lastValidBlockHeight
    }
    stakingPoolAddress
    multipliersAddress
  }
}
    `;
exports.CreateUpdateStakingPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateStakingPoolTransaction($project: String!, $stakingPool: String!, $metadata: UpdateStakingPoolMetadataInput, $authority: String!, $characterModel: String, $resource: String, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateStakingPoolTransaction(
    project: $project
    stakingPool: $stakingPool
    metadata: $metadata
    authority: $authority
    characterModel: $characterModel
    resource: $resource
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateInitMultipliersTransactionDocument = (0, graphql_tag_1.default) `
    query createInitMultipliersTransaction($project: String!, $stakingPool: String!, $decimals: Int!, $multipliers: [AddMultiplierMetadataInput]!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createInitMultipliersTransaction(
    project: $project
    stakingPool: $stakingPool
    decimals: $decimals
    multipliers: $multipliers
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
    multipliersAddress
  }
}
    `;
exports.CreateAddMultiplierTransactionDocument = (0, graphql_tag_1.default) `
    query createAddMultiplierTransaction($project: String!, $multiplier: String!, $metadata: AddMultiplierMetadataInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAddMultiplierTransaction(
    project: $project
    multiplier: $multiplier
    metadata: $metadata
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateStakeCharactersTransactionsDocument = (0, graphql_tag_1.default) `
    query createStakeCharactersTransactions($characterAddresses: [String!]!, $characterModel: String!, $stakingPool: String!, $project: String!, $feePayer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createStakeCharactersTransactions(
    characterAddresses: $characterAddresses
    characterModel: $characterModel
    stakingPool: $stakingPool
    project: $project
    feePayer: $feePayer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.FindSplStakingPoolsDocument = (0, graphql_tag_1.default) `
    query findSplStakingPools($addresses: [Bytes!], $projects: [Pubkey!], $names: [String!], $stakeTokenMints: [Pubkey!]) {
  splStakingPools(
    addresses: $addresses
    projects: $projects
    names: $names
    stakeTokenMints: $stakeTokenMints
  ) {
    address
    bump
    nonce
    endTime
    maxStakeDurationSecs
    merkleTrees {
      active
      merkle_trees
      schema
    }
    minStakeDurationSecs
    multipliers {
      value
      multiplierType {
        kind
        params {
          ... on SplMultiplierTypeParamsStakeDuration {
            __typename
            minDuration
          }
          ... on SplMultiplierTypeParamsStakeAmount {
            __typename
            minAmount
          }
        }
      }
    }
    name
    project
    rewardConfig {
      kind
      params {
        ... on SplRewardConfigParamsApy {
          rewardTokenMint
          rewardVault
          rewardsDuration
          rewardsPerDuration
          totalRewardAmount
        }
        ... on SplRewardConfigParamsStakeWeight {
          __typename
          pools {
            weight
          }
        }
      }
    }
    stake_token_mint
    startTime
    totalStakedAmount
  }
}
    `;
exports.FindSplStakingRecipientsDocument = (0, graphql_tag_1.default) `
    query findSplStakingRecipients($addresses: [Bytes!], $trees: [Bytes!], $stakers: [String!], $projects: [String!], $splStakingPools: [String!], $includeProof: Boolean) {
  splStakingRecipients(
    addresses: $addresses
    trees: $trees
    stakers: $stakers
    projects: $projects
    splStakingPools: $splStakingPools
    includeProof: $includeProof
  ) {
    address
    leaf_idx
    lokedTill
    multiplier
    proof {
      canopy_depth
      leaf
      leaf_index
      maxDepth
      node_index
      proof
      root
      tree_id
    }
    rewardsClaimed {
      kind
      params {
        ... on StakerClaimedParamsApy {
          __typename
          lastRewardTime
        }
        ... on StakerClaimedParamsStakeWeight {
          __typename
          amounts
        }
      }
    }
    stakeStartTime
    staker
    stakedAmount
    tree_id
  }
}
    `;
exports.CreateCreateSplStakingPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateSplStakingPoolTransaction($project: String!, $stakeTokenMint: String!, $metadata: CreateSplStakingPoolMetadataInput!, $multipliers: [AddSplMultiplierMetadataInput!], $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateSplStakingPoolTransaction(
    project: $project
    stakeTokenMint: $stakeTokenMint
    multipliers: $multipliers
    metadata: $metadata
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    splStakingPoolAddress
  }
}
    `;
exports.CreateUpdateSplStakingPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateSplStakingPoolTransaction($project: String!, $splStakingPool: String!, $metadata: UpdateSplStakingPoolMetadataInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateSplStakingPoolTransaction(
    project: $project
    splStakingPool: $splStakingPool
    metadata: $metadata
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateCreateNewSplStakingPoolTreeTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateNewSplStakingPoolTreeTransaction($treeConfig: TreeSetupConfig!, $project: String!, $splStakingPool: String!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateNewSplStakingPoolTreeTransaction(
    treeConfig: $treeConfig
    project: $project
    splStakingPool: $splStakingPool
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    treeAddress
    proofBytes
    space
    cost
    maxTreeCapacity
  }
}
    `;
exports.CreateAddRemoveSplMultipliersTransactionDocument = (0, graphql_tag_1.default) `
    query createAddRemoveSplMultipliersTransaction($project: String!, $splStakingPool: String!, $add: [AddSplMultiplierMetadataInput!], $remove: [Int!], $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAddRemoveSplMultipliersTransaction(
    project: $project
    splStakingPool: $splStakingPool
    add: $add
    remove: $remove
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateSplRewardPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createSplRewardPoolTransaction($project: String!, $splStakingPool: String!, $rewardTokenMint: String!, $rewardConfig: CreateSplRewardPoolArgsInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createSplRewardPoolTransaction(
    project: $project
    splStakingPool: $splStakingPool
    rewardTokenMint: $rewardTokenMint
    rewardConfig: $rewardConfig
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateAddRemoveRewardsFromRewardPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createAddRemoveRewardsFromRewardPoolTransaction($project: String!, $splStakingPool: String!, $rewardTokenMint: String!, $action: AddRemoveRewardsFromRewardPoolActionInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAddRemoveRewardsFromRewardPoolTransaction(
    project: $project
    splStakingPool: $splStakingPool
    rewardTokenMint: $rewardTokenMint
    action: $action
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateStakeSplTokensTransactionDocument = (0, graphql_tag_1.default) `
    query createStakeSplTokensTransaction($project: String!, $splStakingPool: String!, $amount: BigInt!, $lockPeriodSecs: BigInt!, $staker: String!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createStakeSplTokensTransaction(
    project: $project
    splStakingPool: $splStakingPool
    amount: $amount
    lockPeriodSecs: $lockPeriodSecs
    staker: $staker
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateClaimSplRewardsTransactionDocument = (0, graphql_tag_1.default) `
    query createClaimSplRewardsTransaction($project: String!, $splStakingPool: String!, $staker: String!, $stakingReciept: String!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createClaimSplRewardsTransaction(
    project: $project
    splStakingPool: $splStakingPool
    stakingReciept: $stakingReciept
    staker: $staker
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateUnstakeSplTokensTransactionDocument = (0, graphql_tag_1.default) `
    query createUnstakeSplTokensTransaction($project: String!, $splStakingPool: String!, $staker: String!, $stakingReciept: String!, $payer: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUnstakeSplTokensTransaction(
    project: $project
    splStakingPool: $splStakingPool
    stakingReciept: $stakingReciept
    staker: $staker
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateClaimStakingRewardsTransactionsDocument = (0, graphql_tag_1.default) `
    query createClaimStakingRewardsTransactions($characterAddresses: [String!]!, $characterModel: String!, $feePayer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createClaimStakingRewardsTransactions(
    characterAddresses: $characterAddresses
    characterModel: $characterModel
    feePayer: $feePayer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateUnstakeCharactersTransactionsDocument = (0, graphql_tag_1.default) `
    query createUnstakeCharactersTransactions($characterAddresses: [String!]!, $characterModel: String!, $feePayer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUnstakeCharactersTransactions(
    characterAddresses: $characterAddresses
    characterModel: $characterModel
    feePayer: $feePayer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.FindMissionsDocument = (0, graphql_tag_1.default) `
    query findMissions($addresses: [Bytes!], $missionPools: [Pubkey!]) {
  mission(addresses: $addresses, missionPools: $missionPools) {
    project
    address
    program_id
    discriminator
    bump
    missionPool
    name
    minXp
    cost {
      amount
      resource_address
    }
    requirement {
      ... on TimeRequirement {
        kind
        params {
          duration
        }
      }
    }
    rewards {
      min
      max
      rewardType {
        ... on XpRewardType {
          kind
        }
        ... on ResourceRewardType {
          kind
          params {
            address
          }
        }
      }
    }
  }
}
    `;
exports.FindMissionPoolsDocument = (0, graphql_tag_1.default) `
    query findMissionPools($addresses: [Bytes!], $project: Pubkey) {
  missionPool(addresses: $addresses, project: $project) {
    address
    program_id
    discriminator
    bump
    project
    name
    factionsMerkleRoot
    randomizerRound
    characterModels
    guildKits
  }
}
    `;
exports.CreateCreateMissionPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateMissionPoolTransaction($data: NewMissionPoolData!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateMissionPoolTransaction(
    data: $data
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
    missionPoolAddress
  }
}
    `;
exports.CreateUpdateMissionPoolTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateMissionPoolTransaction($data: UpdateMissionPoolData!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateMissionPoolTransaction(
    data: $data
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
  }
}
    `;
exports.CreateCreateMissionTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateMissionTransaction($data: NewMissionData!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateMissionTransaction(
    data: $data
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
    missionAddress
  }
}
    `;
exports.CreateUpdateMissionTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateMissionTransaction($missionAddress: String!, $authority: String!, $params: UpdateMissionInput!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateMissionTransaction(
    missionAddress: $missionAddress
    authority: $authority
    params: $params
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateSendCharactersOnMissionTransactionDocument = (0, graphql_tag_1.default) `
    query createSendCharactersOnMissionTransaction($data: ParticipateOnMissionData!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createSendCharactersOnMissionTransaction(
    data: $data
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateRecallCharactersTransactionDocument = (0, graphql_tag_1.default) `
    query createRecallCharactersTransaction($data: RecallFromMissionData!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createRecallCharactersTransaction(
    data: $data
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.FindResourcesDocument = (0, graphql_tag_1.default) `
    query findResources($addresses: [Bytes!], $projects: [Pubkey!], $mints: [Pubkey!]) {
  resources(addresses: $addresses, projects: $projects, mints: $mints) {
    address
    bump
    kind {
      kind
      params {
        ... on ResourceKindParamsHplFungible {
          __typename
          decimals
        }
        ... on ResourceKindParamsWrappedFungible {
          __typename
          decimals
          custody {
            kind
            params {
              burnerDestination
            }
          }
        }
        ... on ResourceKindParamsHplNonFungible {
          __typename
          characteristics
        }
        ... on ResourceKindParamsWrappedMplCore {
          __typename
          characteristics
        }
      }
    }
    mint
    project
    tags
    storage {
      params {
        promiseSupply
        merkle_trees {
          active
          merkle_trees
          schema
        }
      }
      kind
    }
  }
}
    `;
exports.FindResourcesBalanceDocument = (0, graphql_tag_1.default) `
    query findResourcesBalance($addresses: [String!], $projects: [String!], $mints: [String!], $wallets: [String!]!) {
  resourcesBalance(
    projects: $projects
    wallets: $wallets
    mints: $mints
    addresses: $addresses
  ) {
    address
    amount
    mint
    wallet
    resourceStorage
  }
}
    `;
exports.FindFaucetsDocument = (0, graphql_tag_1.default) `
    query findFaucets($addresses: [Bytes!], $projects: [Pubkey!], $resources: [Pubkey!]) {
  faucets(addresses: $addresses, projects: $projects, resources: $resources) {
    resource
    repeatInterval
    project
    amount
    lastClaimed
    address
  }
}
    `;
exports.FindRecipesDocument = (0, graphql_tag_1.default) `
    query findRecipes($addresses: [Bytes!], $projects: [Pubkey!]) {
  recipes(addresses: $addresses, projects: $projects) {
    address
    bump
    ingredients {
      amount
      resourceAddress
    }
    key
    meal {
      amount
      resourceAddress
    }
    project
    xp
  }
}
    `;
exports.FindHoldingsDocument = (0, graphql_tag_1.default) `
    query findHoldings($addresses: [Bytes!], $holders: [Pubkey], $trees: [Bytes!], $includeProof: Boolean) {
  holdings(
    addresses: $addresses
    holders: $holders
    trees: $trees
    includeProof: $includeProof
  ) {
    address
    balance
    characteristics
    holder
    leaf_idx
    tree_id
    proof {
      canopy_depth
      leaf
      leaf_index
      maxDepth
      node_index
      proof
      root
      tree_id
    }
  }
}
    `;
exports.CreateCreateNewResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateNewResourceTransaction($project: String!, $authority: String!, $params: InitResourceInput!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateNewResourceTransaction(
    project: $project
    authority: $authority
    params: $params
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
    resource
  }
}
    `;
exports.CreateImportFungibleResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createImportFungibleResourceTransaction($params: ImportResourceInput!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createImportFungibleResourceTransaction(
    params: $params
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    resource
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
  }
}
    `;
exports.CreateExportFungibleResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createExportFungibleResourceTransaction($resource: String!, $authority: String!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createExportFungibleResourceTransaction(
    resource: $resource
    authority: $authority
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    blockhash
    lastValidBlockHeight
    transaction
  }
}
    `;
exports.CreateCreateNewResourceTreeTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateNewResourceTreeTransaction($project: String!, $resource: String!, $authority: String!, $treeConfig: TreeSetupConfig!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateNewResourceTreeTransaction(
    project: $project
    resource: $resource
    authority: $authority
    treeConfig: $treeConfig
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      blockhash
      lastValidBlockHeight
      transaction
    }
    treeAddress
    proofBytes
    space
    cost
    maxTreeCapacity
  }
}
    `;
exports.CreateMintResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createMintResourceTransaction($resource: String!, $owner: String!, $authority: String!, $amount: BigInt!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createMintResourceTransaction(
    resource: $resource
    owner: $owner
    authority: $authority
    amount: $amount
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateBurnResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createBurnResourceTransaction($resource: String!, $amount: BigInt!, $authority: String!, $owner: String, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createBurnResourceTransaction(
    resource: $resource
    amount: $amount
    authority: $authority
    owner: $owner
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateTransferResourceTransactionDocument = (0, graphql_tag_1.default) `
    query createTransferResourceTransaction($resource: String!, $owner: String!, $recipient: String!, $amount: BigInt!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createTransferResourceTransaction(
    resource: $resource
    owner: $owner
    recipient: $recipient
    amount: $amount
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateCreateWrapHoldingTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateWrapHoldingTransaction($resource: String!, $amount: BigInt!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateWrapHoldingTransaction(
    resource: $resource
    amount: $amount
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateCreateUnwrapHoldingTransactionDocument = (0, graphql_tag_1.default) `
    query createCreateUnwrapHoldingTransaction($resource: String!, $amount: BigInt!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createCreateUnwrapHoldingTransaction(
    resource: $resource
    amount: $amount
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateInitializeFaucetTransactionDocument = (0, graphql_tag_1.default) `
    query createInitializeFaucetTransaction($resource: String!, $amount: Int!, $repeatInterval: Int!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createInitializeFaucetTransaction(
    resource: $resource
    amount: $amount
    repeatInterval: $repeatInterval
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    tx {
      transaction
      blockhash
      lastValidBlockHeight
    }
    faucet
  }
}
    `;
exports.CreateClaimFaucetTransactionDocument = (0, graphql_tag_1.default) `
    query createClaimFaucetTransaction($faucet: String!, $owner: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createClaimFaucetTransaction(
    faucet: $faucet
    owner: $owner
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateInitializeRecipeTransactionDocument = (0, graphql_tag_1.default) `
    query createInitializeRecipeTransaction($project: String!, $xp: BigInt!, $ingredients: [IngredientsInput!]!, $meal: MealInput!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createInitializeRecipeTransaction(
    project: $project
    xp: $xp
    ingredients: $ingredients
    meal: $meal
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    recipe
    transactions {
      transactions
      blockhash
      lastValidBlockHeight
    }
  }
}
    `;
exports.CreateAddIngredientsTransactionDocument = (0, graphql_tag_1.default) `
    query createAddIngredientsTransaction($recipe: String!, $ingredients: [IngredientsInput!]!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createAddIngredientsTransaction(
    recipe: $recipe
    ingredients: $ingredients
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateRemoveIngredientsTransactionDocument = (0, graphql_tag_1.default) `
    query createRemoveIngredientsTransaction($recipe: String!, $ingredients: [String!]!, $authority: String!, $payer: String, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createRemoveIngredientsTransaction(
    recipe: $recipe
    ingredients: $ingredients
    authority: $authority
    payer: $payer
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transactions
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateInitCookingProcessTransactionsDocument = (0, graphql_tag_1.default) `
    query createInitCookingProcessTransactions($recipe: String!, $authority: String!, $payer: String, $computeUnitPrice: Int, $lutAddresses: [String!]) {
  createInitCookingProcessTransactions(
    authority: $authority
    recipe: $recipe
    payer: $payer
    computeUnitPrice: $computeUnitPrice
    lutAddresses: $lutAddresses
  ) {
    blockhash
    lastValidBlockHeight
    transactions
  }
}
    `;
exports.CreateInitializeBadgeCriteriaTransactionDocument = (0, graphql_tag_1.default) `
    query createInitializeBadgeCriteriaTransaction($args: CreateBadgeCriteriaInput!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createInitializeBadgeCriteriaTransaction(
    args: $args
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateClaimBadgeCriteriaTransactionDocument = (0, graphql_tag_1.default) `
    query createClaimBadgeCriteriaTransaction($args: ClaimBadgeCriteriaInput!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createClaimBadgeCriteriaTransaction(
    args: $args
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
exports.CreateUpdateBadgeCriteriaTransactionDocument = (0, graphql_tag_1.default) `
    query createUpdateBadgeCriteriaTransaction($args: UpdateBadgeCriteriaInput!, $lutAddresses: [String!], $computeUnitPrice: Int) {
  createUpdateBadgeCriteriaTransaction(
    args: $args
    lutAddresses: $lutAddresses
    computeUnitPrice: $computeUnitPrice
  ) {
    transaction
    blockhash
    lastValidBlockHeight
  }
}
    `;
function getSdk(requester) {
    return {
        findCompressedAccounts(variables, options) {
            return requester(exports.FindCompressedAccountsDocument, variables, options);
        },
        fetchProofs(variables, options) {
            return requester(exports.FetchProofsDocument, variables, options);
        },
        findAccounts(variables, options) {
            return requester(exports.FindAccountsDocument, variables, options);
        },
        sendTransactionBundles(variables, options) {
            return requester(exports.SendTransactionBundlesDocument, variables, options);
        },
        signWithShadowSignerAndSendTransactionBundles(variables, options) {
            return requester(exports.SignWithShadowSignerAndSendTransactionBundlesDocument, variables, options);
        },
        sendBulkTransactions(variables, options) {
            return requester(exports.SendBulkTransactionsDocument, variables, options);
        },
        signWithShadowSignerAndSendBulkTransactions(variables, options) {
            return requester(exports.SignWithShadowSignerAndSendBulkTransactionsDocument, variables, options);
        },
        authRequest(variables, options) {
            return requester(exports.AuthRequestDocument, variables, options);
        },
        authConfirm(variables, options) {
            return requester(exports.AuthConfirmDocument, variables, options);
        },
        createTransferAssetsTransactions(variables, options) {
            return requester(exports.CreateTransferAssetsTransactionsDocument, variables, options);
        },
        createBurnAssetsTransactions(variables, options) {
            return requester(exports.CreateBurnAssetsTransactionsDocument, variables, options);
        },
        findGlobal(variables, options) {
            return requester(exports.FindGlobalDocument, variables, options);
        },
        findProjects(variables, options) {
            return requester(exports.FindProjectsDocument, variables, options);
        },
        findDelegateAuthority(variables, options) {
            return requester(exports.FindDelegateAuthorityDocument, variables, options);
        },
        findUsers(variables, options) {
            return requester(exports.FindUsersDocument, variables, options);
        },
        findProfiles(variables, options) {
            return requester(exports.FindProfilesDocument, variables, options);
        },
        createNewUserTransaction(variables, options) {
            return requester(exports.CreateNewUserTransactionDocument, variables, options);
        },
        createNewUserBulkTransaction(variables, options) {
            return requester(exports.CreateNewUserBulkTransactionDocument, variables, options);
        },
        createUpdateUserTransaction(variables, options) {
            return requester(exports.CreateUpdateUserTransactionDocument, variables, options);
        },
        createCreateProjectTransaction(variables, options) {
            return requester(exports.CreateCreateProjectTransactionDocument, variables, options);
        },
        createChangeProjectDriverTransaction(variables, options) {
            return requester(exports.CreateChangeProjectDriverTransactionDocument, variables, options);
        },
        createCreateDelegateAuthorityTransaction(variables, options) {
            return requester(exports.CreateCreateDelegateAuthorityTransactionDocument, variables, options);
        },
        createModifyDelegationTransaction(variables, options) {
            return requester(exports.CreateModifyDelegationTransactionDocument, variables, options);
        },
        createCreateProfilesTreeTransaction(variables, options) {
            return requester(exports.CreateCreateProfilesTreeTransactionDocument, variables, options);
        },
        createNewProfileTransaction(variables, options) {
            return requester(exports.CreateNewProfileTransactionDocument, variables, options);
        },
        createUpdateProfileTransaction(variables, options) {
            return requester(exports.CreateUpdateProfileTransactionDocument, variables, options);
        },
        createUpdatePlatformDataTransaction(variables, options) {
            return requester(exports.CreateUpdatePlatformDataTransactionDocument, variables, options);
        },
        createNewUserWithProfileTransaction(variables, options) {
            return requester(exports.CreateNewUserWithProfileTransactionDocument, variables, options);
        },
        findAssemblerConfig(variables, options) {
            return requester(exports.FindAssemblerConfigDocument, variables, options);
        },
        findCharacterTraits(variables, options) {
            return requester(exports.FindCharacterTraitsDocument, variables, options);
        },
        findCharacterModels(variables, options) {
            return requester(exports.FindCharacterModelsDocument, variables, options);
        },
        findCharacters(variables, options) {
            return requester(exports.FindCharactersDocument, variables, options);
        },
        fetchCharacterHistory(variables, options) {
            return requester(exports.FetchCharacterHistoryDocument, variables, options);
        },
        createCreateAssemblerConfigTransaction(variables, options) {
            return requester(exports.CreateCreateAssemblerConfigTransactionDocument, variables, options);
        },
        createAddCharacterTraitsTransactions(variables, options) {
            return requester(exports.CreateAddCharacterTraitsTransactionsDocument, variables, options);
        },
        createRemoveCharacterTraitsTransactions(variables, options) {
            return requester(exports.CreateRemoveCharacterTraitsTransactionsDocument, variables, options);
        },
        createCreateCharacterModelTransaction(variables, options) {
            return requester(exports.CreateCreateCharacterModelTransactionDocument, variables, options);
        },
        createCreateCharactersTreeTransaction(variables, options) {
            return requester(exports.CreateCreateCharactersTreeTransactionDocument, variables, options);
        },
        createAssembleCharacterTransaction(variables, options) {
            return requester(exports.CreateAssembleCharacterTransactionDocument, variables, options);
        },
        createUpdateCharacterTraitsTransaction(variables, options) {
            return requester(exports.CreateUpdateCharacterTraitsTransactionDocument, variables, options);
        },
        createPopulateCharacterTransaction(variables, options) {
            return requester(exports.CreatePopulateCharacterTransactionDocument, variables, options);
        },
        createWrapAssetsToCharacterTransactions(variables, options) {
            return requester(exports.CreateWrapAssetsToCharacterTransactionsDocument, variables, options);
        },
        createUnwrapAssetsFromCharacterTransactions(variables, options) {
            return requester(exports.CreateUnwrapAssetsFromCharacterTransactionsDocument, variables, options);
        },
        createEquipResourceOnCharacterTransaction(variables, options) {
            return requester(exports.CreateEquipResourceOnCharacterTransactionDocument, variables, options);
        },
        createDismountResourceOnCharacterTransaction(variables, options) {
            return requester(exports.CreateDismountResourceOnCharacterTransactionDocument, variables, options);
        },
        createUseCharacterTransaction(variables, options) {
            return requester(exports.CreateUseCharacterTransactionDocument, variables, options);
        },
        findStakingPools(variables, options) {
            return requester(exports.FindStakingPoolsDocument, variables, options);
        },
        findStakers(variables, options) {
            return requester(exports.FindStakersDocument, variables, options);
        },
        findMultipliers(variables, options) {
            return requester(exports.FindMultipliersDocument, variables, options);
        },
        createCreateStakingPoolTransaction(variables, options) {
            return requester(exports.CreateCreateStakingPoolTransactionDocument, variables, options);
        },
        createUpdateStakingPoolTransaction(variables, options) {
            return requester(exports.CreateUpdateStakingPoolTransactionDocument, variables, options);
        },
        createInitMultipliersTransaction(variables, options) {
            return requester(exports.CreateInitMultipliersTransactionDocument, variables, options);
        },
        createAddMultiplierTransaction(variables, options) {
            return requester(exports.CreateAddMultiplierTransactionDocument, variables, options);
        },
        createStakeCharactersTransactions(variables, options) {
            return requester(exports.CreateStakeCharactersTransactionsDocument, variables, options);
        },
        findSplStakingPools(variables, options) {
            return requester(exports.FindSplStakingPoolsDocument, variables, options);
        },
        findSplStakingRecipients(variables, options) {
            return requester(exports.FindSplStakingRecipientsDocument, variables, options);
        },
        createCreateSplStakingPoolTransaction(variables, options) {
            return requester(exports.CreateCreateSplStakingPoolTransactionDocument, variables, options);
        },
        createUpdateSplStakingPoolTransaction(variables, options) {
            return requester(exports.CreateUpdateSplStakingPoolTransactionDocument, variables, options);
        },
        createCreateNewSplStakingPoolTreeTransaction(variables, options) {
            return requester(exports.CreateCreateNewSplStakingPoolTreeTransactionDocument, variables, options);
        },
        createAddRemoveSplMultipliersTransaction(variables, options) {
            return requester(exports.CreateAddRemoveSplMultipliersTransactionDocument, variables, options);
        },
        createSplRewardPoolTransaction(variables, options) {
            return requester(exports.CreateSplRewardPoolTransactionDocument, variables, options);
        },
        createAddRemoveRewardsFromRewardPoolTransaction(variables, options) {
            return requester(exports.CreateAddRemoveRewardsFromRewardPoolTransactionDocument, variables, options);
        },
        createStakeSplTokensTransaction(variables, options) {
            return requester(exports.CreateStakeSplTokensTransactionDocument, variables, options);
        },
        createClaimSplRewardsTransaction(variables, options) {
            return requester(exports.CreateClaimSplRewardsTransactionDocument, variables, options);
        },
        createUnstakeSplTokensTransaction(variables, options) {
            return requester(exports.CreateUnstakeSplTokensTransactionDocument, variables, options);
        },
        createClaimStakingRewardsTransactions(variables, options) {
            return requester(exports.CreateClaimStakingRewardsTransactionsDocument, variables, options);
        },
        createUnstakeCharactersTransactions(variables, options) {
            return requester(exports.CreateUnstakeCharactersTransactionsDocument, variables, options);
        },
        findMissions(variables, options) {
            return requester(exports.FindMissionsDocument, variables, options);
        },
        findMissionPools(variables, options) {
            return requester(exports.FindMissionPoolsDocument, variables, options);
        },
        createCreateMissionPoolTransaction(variables, options) {
            return requester(exports.CreateCreateMissionPoolTransactionDocument, variables, options);
        },
        createUpdateMissionPoolTransaction(variables, options) {
            return requester(exports.CreateUpdateMissionPoolTransactionDocument, variables, options);
        },
        createCreateMissionTransaction(variables, options) {
            return requester(exports.CreateCreateMissionTransactionDocument, variables, options);
        },
        createUpdateMissionTransaction(variables, options) {
            return requester(exports.CreateUpdateMissionTransactionDocument, variables, options);
        },
        createSendCharactersOnMissionTransaction(variables, options) {
            return requester(exports.CreateSendCharactersOnMissionTransactionDocument, variables, options);
        },
        createRecallCharactersTransaction(variables, options) {
            return requester(exports.CreateRecallCharactersTransactionDocument, variables, options);
        },
        findResources(variables, options) {
            return requester(exports.FindResourcesDocument, variables, options);
        },
        findResourcesBalance(variables, options) {
            return requester(exports.FindResourcesBalanceDocument, variables, options);
        },
        findFaucets(variables, options) {
            return requester(exports.FindFaucetsDocument, variables, options);
        },
        findRecipes(variables, options) {
            return requester(exports.FindRecipesDocument, variables, options);
        },
        findHoldings(variables, options) {
            return requester(exports.FindHoldingsDocument, variables, options);
        },
        createCreateNewResourceTransaction(variables, options) {
            return requester(exports.CreateCreateNewResourceTransactionDocument, variables, options);
        },
        createImportFungibleResourceTransaction(variables, options) {
            return requester(exports.CreateImportFungibleResourceTransactionDocument, variables, options);
        },
        createExportFungibleResourceTransaction(variables, options) {
            return requester(exports.CreateExportFungibleResourceTransactionDocument, variables, options);
        },
        createCreateNewResourceTreeTransaction(variables, options) {
            return requester(exports.CreateCreateNewResourceTreeTransactionDocument, variables, options);
        },
        createMintResourceTransaction(variables, options) {
            return requester(exports.CreateMintResourceTransactionDocument, variables, options);
        },
        createBurnResourceTransaction(variables, options) {
            return requester(exports.CreateBurnResourceTransactionDocument, variables, options);
        },
        createTransferResourceTransaction(variables, options) {
            return requester(exports.CreateTransferResourceTransactionDocument, variables, options);
        },
        createCreateWrapHoldingTransaction(variables, options) {
            return requester(exports.CreateCreateWrapHoldingTransactionDocument, variables, options);
        },
        createCreateUnwrapHoldingTransaction(variables, options) {
            return requester(exports.CreateCreateUnwrapHoldingTransactionDocument, variables, options);
        },
        createInitializeFaucetTransaction(variables, options) {
            return requester(exports.CreateInitializeFaucetTransactionDocument, variables, options);
        },
        createClaimFaucetTransaction(variables, options) {
            return requester(exports.CreateClaimFaucetTransactionDocument, variables, options);
        },
        createInitializeRecipeTransaction(variables, options) {
            return requester(exports.CreateInitializeRecipeTransactionDocument, variables, options);
        },
        createAddIngredientsTransaction(variables, options) {
            return requester(exports.CreateAddIngredientsTransactionDocument, variables, options);
        },
        createRemoveIngredientsTransaction(variables, options) {
            return requester(exports.CreateRemoveIngredientsTransactionDocument, variables, options);
        },
        createInitCookingProcessTransactions(variables, options) {
            return requester(exports.CreateInitCookingProcessTransactionsDocument, variables, options);
        },
        createInitializeBadgeCriteriaTransaction(variables, options) {
            return requester(exports.CreateInitializeBadgeCriteriaTransactionDocument, variables, options);
        },
        createClaimBadgeCriteriaTransaction(variables, options) {
            return requester(exports.CreateClaimBadgeCriteriaTransactionDocument, variables, options);
        },
        createUpdateBadgeCriteriaTransaction(variables, options) {
            return requester(exports.CreateUpdateBadgeCriteriaTransactionDocument, variables, options);
        }
    };
}
//# sourceMappingURL=generated.js.map